# ===================================================================
# üë§ BASE USER ENDPOINTS - Standard User Operations
# ===================================================================
# Required: Valid JWT token with 'base_user' role or higher
# Scope: Profile management, password changes, verification

@Server_HostAddress = https://localhost:7000
@API_Version = v1
@Base_Auth_URL = {{Server_HostAddress}}/api/{{API_Version}}/auth

# ===================================================================
# üé´ TOKEN MANAGEMENT
# ===================================================================
# Get token from public.http login responses

# Option 1: From public.http user login
@base_user_token = {{userLogin.response.body.accessToken}}

# Option 2: Environment variable (CI/CD)
# @base_user_token = {{$dotenv BASE_USER_TOKEN}}

# Option 3: Manual token (for quick testing)
# @base_user_token = eyJhbGciOiJIUzI1NiIs...

# ===================================================================
# üë§ PROFILE MANAGEMENT
# ===================================================================

### Get Current User Profile
GET {{Base_Auth_URL}}/profile
Authorization: Bearer {{base_user_token}}

### Update Profile (Limited Fields)
# Base users can only update: username, profession
PUT {{Base_Auth_URL}}/profile
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "username": "updated_username",
  "profession": "Senior Software Engineer"
}

# ===================================================================
# üìßüì± SECURE CONTACT UPDATES
# ===================================================================

### Update Email (Resets verification status)
PUT {{Base_Auth_URL}}/profile/email
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "newEmail": "newemail@example.com"
}

### Update Phone Number (Resets verification status)
PUT {{Base_Auth_URL}}/profile/phone
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "newPhoneNumber": "5551234567"
}

# ===================================================================
# üîê PASSWORD MANAGEMENT
# ===================================================================

### Change Password
POST {{Base_Auth_URL}}/change-password
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "currentPassword": "User123!",
  "newPassword": "NewPassword123!"
}

# ===================================================================
# ‚úÖ VERIFICATION PROCESSES
# ===================================================================

### Verify Email Address
POST {{Base_Auth_URL}}/verify-email
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "verificationCode": "123456"
}

### Verify Phone Number
POST {{Base_Auth_URL}}/verify-phone
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "verificationCode": "123456"
}

### Request Email Verification Code
POST {{Base_Auth_URL}}/request-email-verification
Authorization: Bearer {{base_user_token}}

### Request Phone Verification Code
POST {{Base_Auth_URL}}/request-phone-verification
Authorization: Bearer {{base_user_token}}

# ===================================================================
# üîç USER INFORMATION & PERMISSIONS
# ===================================================================

### Get User Permissions/Roles
GET {{Base_Auth_URL}}/permissions
Authorization: Bearer {{base_user_token}}

### Get Available System Roles
GET {{Base_Auth_URL}}/roles
Authorization: Bearer {{base_user_token}}

### Get Current User Claims
GET {{Base_Auth_URL}}/claims
Authorization: Bearer {{base_user_token}}

# ===================================================================
# üß™ TESTING SCENARIOS
# ===================================================================

### Test Invalid Username Update
PUT {{Base_Auth_URL}}/profile
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "username": "a",
  "profession": "Test"
}

### Test Restricted Field Update (Should Fail)
PUT {{Base_Auth_URL}}/profile
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "firstName": "Should Not Work",
  "lastName": "Restricted Field"
}

### Test Invalid Email Format
PUT {{Base_Auth_URL}}/profile/email
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "newEmail": "invalid-email-format"
}

### Test Invalid Phone Format
PUT {{Base_Auth_URL}}/profile/phone
Authorization: Bearer {{base_user_token}}
Content-Type: application/json

{
  "newPhoneNumber": "invalid-phone"
}

# ===================================================================
# üìã USAGE NOTES
# ===================================================================
#
# BASE USER CAPABILITIES:
# ‚úÖ View own profile
# ‚úÖ Update username (with validation)
# ‚úÖ Update profession
# ‚úÖ Change password (with current password verification)
# ‚úÖ Update email (separate endpoint, resets verification)
# ‚úÖ Update phone (separate endpoint, resets verification)
# ‚úÖ Verify email/phone with codes
# ‚úÖ View own permissions and roles
#
# BASE USER RESTRICTIONS:
# ‚ùå Cannot update firstName/lastName (immutable after registration)
# ‚ùå Cannot view other users' data
# ‚ùå Cannot assign roles
# ‚ùå Cannot delete accounts
# ‚ùå Cannot access admin endpoints
#
# SECURITY FEATURES:
# - Username validation (3-20 chars, alphanumeric + underscore)
# - Email/phone updates reset verification status
# - Password strength validation (8+ chars, mixed case, digits, special)
# - All endpoints require valid JWT token
# - Role-based access control
#
# TOKEN SETUP:
# 1. Run public.http ‚Üí "Standard User Login"
# 2. Token automatically available as {{userLogin.response.body.accessToken}}
# 3. Or set BASE_USER_TOKEN environment variable
#
# ERROR HANDLING:
# - 401: Invalid or expired token
# - 403: Insufficient permissions
# - 400: Validation errors
# - 422: Business rule violations 