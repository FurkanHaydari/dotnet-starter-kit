@Server_HostAddress = https://localhost:7000

# Option 1: Manual Token Update (copy from login response in public.http)
@admin_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.COPY_TOKEN_FROM_ADMIN_LOGIN

# Option 2: Use response from public.http admin login (if using same workspace)
# @admin_token = {{adminLogin.response.body.token}}

### ===== TOKEN SETUP INSTRUCTIONS =====
# 1. Go to public.http and run "Login - Admin User" request
# 2. Copy the JWT token from response
# 3. Replace "COPY_TOKEN_FROM_ADMIN_LOGIN" above with the token
# 4. Or set ADMIN_TOKEN environment variable

### ===== ADMIN ENDPOINTS (Authentication Required - Admin/Customer Admin Only) =====

### Get All Users
GET {{Server_HostAddress}}/api/v1/admin/users
Authorization: Bearer {{admin_token}}

### Create New User (Admin Only)
POST {{Server_HostAddress}}/api/v1/admin/users
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "email": "newuser@example.com",
  "username": "newuser123",
  "phoneNumber": "+905551234567",
  "password": "NewUser123!",
  "firstName": "New",
  "lastName": "User",
  "profession": "Software Developer",
  "role": "base_user",
  "status": "ACTIVE",
  "isIdentityVerified": false,
  "isPhoneVerified": false,
  "isEmailVerified": false
}

### Get Specific User
GET {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6
Authorization: Bearer {{admin_token}}

### Update User (Admin Only)
PUT {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "email": "updated@example.com",
  "username": "updateduser",
  "firstName": "Updated",
  "lastName": "User",
  "phoneNumber": "+905559876543",
  "profession": "Senior Developer",
  "status": "ACTIVE",
  "isIdentityVerified": true,
  "isPhoneVerified": true,
  "isEmailVerified": true
}

### Soft Delete User
DELETE {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6
Authorization: Bearer {{admin_token}}

### Permanent Delete User (Super Admin Only)
DELETE {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6/permanent
Authorization: Bearer {{admin_token}}

### ===== ROLE MANAGEMENT =====

### Get Available Roles
GET {{Server_HostAddress}}/api/v1/admin/roles
Authorization: Bearer {{admin_token}}

### Get User Roles
GET {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6/roles
Authorization: Bearer {{admin_token}}

### Assign Role to User
POST {{Server_HostAddress}}/api/v1/admin/users/ca3b76a4-abb2-4fe8-9a42-a717196f02e6/roles
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "roleId": "customer_admin"
}

### Remove Role from User
DELETE {{Server_HostAddress}}/api/v1/auth/users/00000000-0000-0000-0000-000000000001/roles/customer_admin
Authorization: Bearer {{admin_token}}

### Get Users by Role
GET {{Server_HostAddress}}/api/v1/auth/users/by-role/admin
Authorization: Bearer {{admin_token}}

### Get Users by Role - Customer Admin
GET {{Server_HostAddress}}/api/v1/auth/users/by-role/customer_admin
Authorization: Bearer {{admin_token}}

### Get Users by Role - Customer Support
GET {{Server_HostAddress}}/api/v1/auth/users/by-role/customer_support
Authorization: Bearer {{admin_token}}

### Get Users by Role - Base User
GET {{Server_HostAddress}}/api/v1/auth/users/by-role/base_user
Authorization: Bearer {{admin_token}}

### ===== NOTES =====
# ADMIN CAPABILITIES:
# ✅ Create users with any role
# ✅ Update ALL user fields (including firstName, lastName)
# ✅ Delete users (soft delete)
# ✅ Hard delete users (permanent removal)
# ✅ Assign/remove roles
# ✅ View all users and filter by role
# ✅ Bypass all profile update restrictions
#
# AVAILABLE ROLES:
# - admin: Full system access
# - customer_admin: Customer organization admin
# - customer_support: Customer support access  
# - base_user: Standard user access
#
# PERMISSION HIERARCHY:
# admin > customer_admin > customer_support > base_user
#
# SECURITY NOTES:
# - Admin token required for all endpoints
# - Hard delete is admin-only (most destructive operation)
# - Role assignment follows business rules
# - All admin actions are logged
#
# HOW TO GET FRESH ADMIN TOKEN:
# 1. Use public.http to login with admin credentials
# 2. Copy JWT token from response
# 3. Update @admin_token variable above 